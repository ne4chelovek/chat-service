// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/ne4chelovek/chat_service/internal/repository.ChatRepository -o chat_repository_minimock.go -n ChatRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/ne4chelovek/chat_service/internal/model"
	"google.golang.org/protobuf/types/known/emptypb"
)

// ChatRepositoryMock implements mm_repository.ChatRepository
type ChatRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, user []string) (i1 int64, err error)
	funcCreateOrigin    string
	inspectFuncCreate   func(ctx context.Context, user []string)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mChatRepositoryMockCreate

	funcDeleteChat          func(ctx context.Context, chatID int64) (ep1 *emptypb.Empty, err error)
	funcDeleteChatOrigin    string
	inspectFuncDeleteChat   func(ctx context.Context, chatID int64)
	afterDeleteChatCounter  uint64
	beforeDeleteChatCounter uint64
	DeleteChatMock          mChatRepositoryMockDeleteChat

	funcGetChatInfo          func(ctx context.Context, chatID int64) (sa1 []string, err error)
	funcGetChatInfoOrigin    string
	inspectFuncGetChatInfo   func(ctx context.Context, chatID int64)
	afterGetChatInfoCounter  uint64
	beforeGetChatInfoCounter uint64
	GetChatInfoMock          mChatRepositoryMockGetChatInfo

	funcGetMessage          func(ctx context.Context, chatID int64, page uint64) (mpa1 []*model.Message, err error)
	funcGetMessageOrigin    string
	inspectFuncGetMessage   func(ctx context.Context, chatID int64, page uint64)
	afterGetMessageCounter  uint64
	beforeGetMessageCounter uint64
	GetMessageMock          mChatRepositoryMockGetMessage

	funcSendMessage          func(ctx context.Context, chatID int64, mes *model.Message) (s1 string, err error)
	funcSendMessageOrigin    string
	inspectFuncSendMessage   func(ctx context.Context, chatID int64, mes *model.Message)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mChatRepositoryMockSendMessage
}

// NewChatRepositoryMock returns a mock for mm_repository.ChatRepository
func NewChatRepositoryMock(t minimock.Tester) *ChatRepositoryMock {
	m := &ChatRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mChatRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*ChatRepositoryMockCreateParams{}

	m.DeleteChatMock = mChatRepositoryMockDeleteChat{mock: m}
	m.DeleteChatMock.callArgs = []*ChatRepositoryMockDeleteChatParams{}

	m.GetChatInfoMock = mChatRepositoryMockGetChatInfo{mock: m}
	m.GetChatInfoMock.callArgs = []*ChatRepositoryMockGetChatInfoParams{}

	m.GetMessageMock = mChatRepositoryMockGetMessage{mock: m}
	m.GetMessageMock.callArgs = []*ChatRepositoryMockGetMessageParams{}

	m.SendMessageMock = mChatRepositoryMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*ChatRepositoryMockSendMessageParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatRepositoryMockCreate struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateExpectation
	expectations       []*ChatRepositoryMockCreateExpectation

	callArgs []*ChatRepositoryMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockCreateExpectation specifies expectation struct of the ChatRepository.Create
type ChatRepositoryMockCreateExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockCreateParams
	paramPtrs          *ChatRepositoryMockCreateParamPtrs
	expectationOrigins ChatRepositoryMockCreateExpectationOrigins
	results            *ChatRepositoryMockCreateResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockCreateParams contains parameters of the ChatRepository.Create
type ChatRepositoryMockCreateParams struct {
	ctx  context.Context
	user []string
}

// ChatRepositoryMockCreateParamPtrs contains pointers to parameters of the ChatRepository.Create
type ChatRepositoryMockCreateParamPtrs struct {
	ctx  *context.Context
	user *[]string
}

// ChatRepositoryMockCreateResults contains results of the ChatRepository.Create
type ChatRepositoryMockCreateResults struct {
	i1  int64
	err error
}

// ChatRepositoryMockCreateOrigins contains origins of expectations of the ChatRepository.Create
type ChatRepositoryMockCreateExpectationOrigins struct {
	origin     string
	originCtx  string
	originUser string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mChatRepositoryMockCreate) Optional() *mChatRepositoryMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for ChatRepository.Create
func (mmCreate *mChatRepositoryMockCreate) Expect(ctx context.Context, user []string) *mChatRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &ChatRepositoryMockCreateParams{ctx, user}
	mmCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.Create
func (mmCreate *mChatRepositoryMockCreate) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectUserParam2 sets up expected param user for ChatRepository.Create
func (mmCreate *mChatRepositoryMockCreate) ExpectUserParam2(user []string) *mChatRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.user = &user
	mmCreate.defaultExpectation.expectationOrigins.originUser = minimock.CallerInfo(1)

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.Create
func (mmCreate *mChatRepositoryMockCreate) Inspect(f func(ctx context.Context, user []string)) *mChatRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by ChatRepository.Create
func (mmCreate *mChatRepositoryMockCreate) Return(i1 int64, err error) *ChatRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &ChatRepositoryMockCreateResults{i1, err}
	mmCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// Set uses given function f to mock the ChatRepository.Create method
func (mmCreate *mChatRepositoryMockCreate) Set(f func(ctx context.Context, user []string) (i1 int64, err error)) *ChatRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the ChatRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the ChatRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	mmCreate.mock.funcCreateOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// When sets expectation for the ChatRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mChatRepositoryMockCreate) When(ctx context.Context, user []string) *ChatRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatRepositoryMock.Create mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateExpectation{
		mock:               mmCreate.mock,
		params:             &ChatRepositoryMockCreateParams{ctx, user},
		expectationOrigins: ChatRepositoryMockCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.Create return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateExpectation) Then(i1 int64, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateResults{i1, err}
	return e.mock
}

// Times sets number of times ChatRepository.Create should be invoked
func (mmCreate *mChatRepositoryMockCreate) Times(n uint64) *mChatRepositoryMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of ChatRepositoryMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	mmCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreate
}

func (mmCreate *mChatRepositoryMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements mm_repository.ChatRepository
func (mmCreate *ChatRepositoryMock) Create(ctx context.Context, user []string) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	mmCreate.t.Helper()

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, user)
	}

	mm_params := ChatRepositoryMockCreateParams{ctx, user}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCreateParams{ctx, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("ChatRepositoryMock.Create got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmCreate.t.Errorf("ChatRepositoryMock.Create got unexpected parameter user, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originUser, *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("ChatRepositoryMock.Create got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreate.CreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the ChatRepositoryMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, user)
	}
	mmCreate.t.Fatalf("Unexpected call to ChatRepositoryMock.Create. %v %v", ctx, user)
	return
}

// CreateAfterCounter returns a count of finished ChatRepositoryMock.Create invocations
func (mmCreate *ChatRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of ChatRepositoryMock.Create invocations
func (mmCreate *ChatRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mChatRepositoryMockCreate) Calls() []*ChatRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.Create at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.Create at\n%s", m.CreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.Create at\n%s with params: %#v", m.CreateMock.defaultExpectation.expectationOrigins.origin, *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.Create at\n%s", m.funcCreateOrigin)
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.Create at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), m.CreateMock.expectedInvocationsOrigin, afterCreateCounter)
	}
}

type mChatRepositoryMockDeleteChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockDeleteChatExpectation
	expectations       []*ChatRepositoryMockDeleteChatExpectation

	callArgs []*ChatRepositoryMockDeleteChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockDeleteChatExpectation specifies expectation struct of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockDeleteChatParams
	paramPtrs          *ChatRepositoryMockDeleteChatParamPtrs
	expectationOrigins ChatRepositoryMockDeleteChatExpectationOrigins
	results            *ChatRepositoryMockDeleteChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockDeleteChatParams contains parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParams struct {
	ctx    context.Context
	chatID int64
}

// ChatRepositoryMockDeleteChatParamPtrs contains pointers to parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParamPtrs struct {
	ctx    *context.Context
	chatID *int64
}

// ChatRepositoryMockDeleteChatResults contains results of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatResults struct {
	ep1 *emptypb.Empty
	err error
}

// ChatRepositoryMockDeleteChatOrigins contains origins of expectations of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectationOrigins struct {
	origin       string
	originCtx    string
	originChatID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Optional() *mChatRepositoryMockDeleteChat {
	mmDeleteChat.optional = true
	return mmDeleteChat
}

// Expect sets up expected params for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Expect(ctx context.Context, chatID int64) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.paramPtrs != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by ExpectParams functions")
	}

	mmDeleteChat.defaultExpectation.params = &ChatRepositoryMockDeleteChatParams{ctx, chatID}
	mmDeleteChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteChat.expectations {
		if minimock.Equal(e.params, mmDeleteChat.defaultExpectation.params) {
			mmDeleteChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteChat.defaultExpectation.params)
		}
	}

	return mmDeleteChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteChat
}

// ExpectChatIDParam2 sets up expected param chatID for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) ExpectChatIDParam2(chatID int64) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.chatID = &chatID
	mmDeleteChat.defaultExpectation.expectationOrigins.originChatID = minimock.CallerInfo(1)

	return mmDeleteChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Inspect(f func(ctx context.Context, chatID int64)) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.inspectFuncDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.DeleteChat")
	}

	mmDeleteChat.mock.inspectFuncDeleteChat = f

	return mmDeleteChat
}

// Return sets up results that will be returned by ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Return(ep1 *emptypb.Empty, err error) *ChatRepositoryMock {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{mock: mmDeleteChat.mock}
	}
	mmDeleteChat.defaultExpectation.results = &ChatRepositoryMockDeleteChatResults{ep1, err}
	mmDeleteChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// Set uses given function f to mock the ChatRepository.DeleteChat method
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Set(f func(ctx context.Context, chatID int64) (ep1 *emptypb.Empty, err error)) *ChatRepositoryMock {
	if mmDeleteChat.defaultExpectation != nil {
		mmDeleteChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.DeleteChat method")
	}

	if len(mmDeleteChat.expectations) > 0 {
		mmDeleteChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.DeleteChat method")
	}

	mmDeleteChat.mock.funcDeleteChat = f
	mmDeleteChat.mock.funcDeleteChatOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// When sets expectation for the ChatRepository.DeleteChat which will trigger the result defined by the following
// Then helper
func (mmDeleteChat *mChatRepositoryMockDeleteChat) When(ctx context.Context, chatID int64) *ChatRepositoryMockDeleteChatExpectation {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockDeleteChatExpectation{
		mock:               mmDeleteChat.mock,
		params:             &ChatRepositoryMockDeleteChatParams{ctx, chatID},
		expectationOrigins: ChatRepositoryMockDeleteChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteChat.expectations = append(mmDeleteChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.DeleteChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockDeleteChatExpectation) Then(ep1 *emptypb.Empty, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockDeleteChatResults{ep1, err}
	return e.mock
}

// Times sets number of times ChatRepository.DeleteChat should be invoked
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Times(n uint64) *mChatRepositoryMockDeleteChat {
	if n == 0 {
		mmDeleteChat.mock.t.Fatalf("Times of ChatRepositoryMock.DeleteChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteChat.expectedInvocations, n)
	mmDeleteChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteChat
}

func (mmDeleteChat *mChatRepositoryMockDeleteChat) invocationsDone() bool {
	if len(mmDeleteChat.expectations) == 0 && mmDeleteChat.defaultExpectation == nil && mmDeleteChat.mock.funcDeleteChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteChat.mock.afterDeleteChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteChat implements mm_repository.ChatRepository
func (mmDeleteChat *ChatRepositoryMock) DeleteChat(ctx context.Context, chatID int64) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmDeleteChat.beforeDeleteChatCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteChat.afterDeleteChatCounter, 1)

	mmDeleteChat.t.Helper()

	if mmDeleteChat.inspectFuncDeleteChat != nil {
		mmDeleteChat.inspectFuncDeleteChat(ctx, chatID)
	}

	mm_params := ChatRepositoryMockDeleteChatParams{ctx, chatID}

	// Record call args
	mmDeleteChat.DeleteChatMock.mutex.Lock()
	mmDeleteChat.DeleteChatMock.callArgs = append(mmDeleteChat.DeleteChatMock.callArgs, &mm_params)
	mmDeleteChat.DeleteChatMock.mutex.Unlock()

	for _, e := range mmDeleteChat.DeleteChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmDeleteChat.DeleteChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteChat.DeleteChatMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteChat.DeleteChatMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteChat.DeleteChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockDeleteChatParams{ctx, chatID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameter chatID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originChatID, *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteChat.DeleteChatMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteChat.t.Fatal("No results are set for the ChatRepositoryMock.DeleteChat")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmDeleteChat.funcDeleteChat != nil {
		return mmDeleteChat.funcDeleteChat(ctx, chatID)
	}
	mmDeleteChat.t.Fatalf("Unexpected call to ChatRepositoryMock.DeleteChat. %v %v", ctx, chatID)
	return
}

// DeleteChatAfterCounter returns a count of finished ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.afterDeleteChatCounter)
}

// DeleteChatBeforeCounter returns a count of ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.beforeDeleteChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.DeleteChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Calls() []*ChatRepositoryMockDeleteChatParams {
	mmDeleteChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockDeleteChatParams, len(mmDeleteChat.callArgs))
	copy(argCopy, mmDeleteChat.callArgs)

	mmDeleteChat.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteChatDone returns true if the count of the DeleteChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockDeleteChatDone() bool {
	if m.DeleteChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteChatMock.invocationsDone()
}

// MinimockDeleteChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockDeleteChatInspect() {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteChatCounter := mm_atomic.LoadUint64(&m.afterDeleteChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && afterDeleteChatCounter < 1 {
		if m.DeleteChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s", m.DeleteChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s with params: %#v", m.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *m.DeleteChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && afterDeleteChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s", m.funcDeleteChatOrigin)
	}

	if !m.DeleteChatMock.invocationsDone() && afterDeleteChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.DeleteChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteChatMock.expectedInvocations), m.DeleteChatMock.expectedInvocationsOrigin, afterDeleteChatCounter)
	}
}

type mChatRepositoryMockGetChatInfo struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockGetChatInfoExpectation
	expectations       []*ChatRepositoryMockGetChatInfoExpectation

	callArgs []*ChatRepositoryMockGetChatInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockGetChatInfoExpectation specifies expectation struct of the ChatRepository.GetChatInfo
type ChatRepositoryMockGetChatInfoExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockGetChatInfoParams
	paramPtrs          *ChatRepositoryMockGetChatInfoParamPtrs
	expectationOrigins ChatRepositoryMockGetChatInfoExpectationOrigins
	results            *ChatRepositoryMockGetChatInfoResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockGetChatInfoParams contains parameters of the ChatRepository.GetChatInfo
type ChatRepositoryMockGetChatInfoParams struct {
	ctx    context.Context
	chatID int64
}

// ChatRepositoryMockGetChatInfoParamPtrs contains pointers to parameters of the ChatRepository.GetChatInfo
type ChatRepositoryMockGetChatInfoParamPtrs struct {
	ctx    *context.Context
	chatID *int64
}

// ChatRepositoryMockGetChatInfoResults contains results of the ChatRepository.GetChatInfo
type ChatRepositoryMockGetChatInfoResults struct {
	sa1 []string
	err error
}

// ChatRepositoryMockGetChatInfoOrigins contains origins of expectations of the ChatRepository.GetChatInfo
type ChatRepositoryMockGetChatInfoExpectationOrigins struct {
	origin       string
	originCtx    string
	originChatID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetChatInfo *mChatRepositoryMockGetChatInfo) Optional() *mChatRepositoryMockGetChatInfo {
	mmGetChatInfo.optional = true
	return mmGetChatInfo
}

// Expect sets up expected params for ChatRepository.GetChatInfo
func (mmGetChatInfo *mChatRepositoryMockGetChatInfo) Expect(ctx context.Context, chatID int64) *mChatRepositoryMockGetChatInfo {
	if mmGetChatInfo.mock.funcGetChatInfo != nil {
		mmGetChatInfo.mock.t.Fatalf("ChatRepositoryMock.GetChatInfo mock is already set by Set")
	}

	if mmGetChatInfo.defaultExpectation == nil {
		mmGetChatInfo.defaultExpectation = &ChatRepositoryMockGetChatInfoExpectation{}
	}

	if mmGetChatInfo.defaultExpectation.paramPtrs != nil {
		mmGetChatInfo.mock.t.Fatalf("ChatRepositoryMock.GetChatInfo mock is already set by ExpectParams functions")
	}

	mmGetChatInfo.defaultExpectation.params = &ChatRepositoryMockGetChatInfoParams{ctx, chatID}
	mmGetChatInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetChatInfo.expectations {
		if minimock.Equal(e.params, mmGetChatInfo.defaultExpectation.params) {
			mmGetChatInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetChatInfo.defaultExpectation.params)
		}
	}

	return mmGetChatInfo
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.GetChatInfo
func (mmGetChatInfo *mChatRepositoryMockGetChatInfo) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockGetChatInfo {
	if mmGetChatInfo.mock.funcGetChatInfo != nil {
		mmGetChatInfo.mock.t.Fatalf("ChatRepositoryMock.GetChatInfo mock is already set by Set")
	}

	if mmGetChatInfo.defaultExpectation == nil {
		mmGetChatInfo.defaultExpectation = &ChatRepositoryMockGetChatInfoExpectation{}
	}

	if mmGetChatInfo.defaultExpectation.params != nil {
		mmGetChatInfo.mock.t.Fatalf("ChatRepositoryMock.GetChatInfo mock is already set by Expect")
	}

	if mmGetChatInfo.defaultExpectation.paramPtrs == nil {
		mmGetChatInfo.defaultExpectation.paramPtrs = &ChatRepositoryMockGetChatInfoParamPtrs{}
	}
	mmGetChatInfo.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetChatInfo.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetChatInfo
}

// ExpectChatIDParam2 sets up expected param chatID for ChatRepository.GetChatInfo
func (mmGetChatInfo *mChatRepositoryMockGetChatInfo) ExpectChatIDParam2(chatID int64) *mChatRepositoryMockGetChatInfo {
	if mmGetChatInfo.mock.funcGetChatInfo != nil {
		mmGetChatInfo.mock.t.Fatalf("ChatRepositoryMock.GetChatInfo mock is already set by Set")
	}

	if mmGetChatInfo.defaultExpectation == nil {
		mmGetChatInfo.defaultExpectation = &ChatRepositoryMockGetChatInfoExpectation{}
	}

	if mmGetChatInfo.defaultExpectation.params != nil {
		mmGetChatInfo.mock.t.Fatalf("ChatRepositoryMock.GetChatInfo mock is already set by Expect")
	}

	if mmGetChatInfo.defaultExpectation.paramPtrs == nil {
		mmGetChatInfo.defaultExpectation.paramPtrs = &ChatRepositoryMockGetChatInfoParamPtrs{}
	}
	mmGetChatInfo.defaultExpectation.paramPtrs.chatID = &chatID
	mmGetChatInfo.defaultExpectation.expectationOrigins.originChatID = minimock.CallerInfo(1)

	return mmGetChatInfo
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.GetChatInfo
func (mmGetChatInfo *mChatRepositoryMockGetChatInfo) Inspect(f func(ctx context.Context, chatID int64)) *mChatRepositoryMockGetChatInfo {
	if mmGetChatInfo.mock.inspectFuncGetChatInfo != nil {
		mmGetChatInfo.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.GetChatInfo")
	}

	mmGetChatInfo.mock.inspectFuncGetChatInfo = f

	return mmGetChatInfo
}

// Return sets up results that will be returned by ChatRepository.GetChatInfo
func (mmGetChatInfo *mChatRepositoryMockGetChatInfo) Return(sa1 []string, err error) *ChatRepositoryMock {
	if mmGetChatInfo.mock.funcGetChatInfo != nil {
		mmGetChatInfo.mock.t.Fatalf("ChatRepositoryMock.GetChatInfo mock is already set by Set")
	}

	if mmGetChatInfo.defaultExpectation == nil {
		mmGetChatInfo.defaultExpectation = &ChatRepositoryMockGetChatInfoExpectation{mock: mmGetChatInfo.mock}
	}
	mmGetChatInfo.defaultExpectation.results = &ChatRepositoryMockGetChatInfoResults{sa1, err}
	mmGetChatInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetChatInfo.mock
}

// Set uses given function f to mock the ChatRepository.GetChatInfo method
func (mmGetChatInfo *mChatRepositoryMockGetChatInfo) Set(f func(ctx context.Context, chatID int64) (sa1 []string, err error)) *ChatRepositoryMock {
	if mmGetChatInfo.defaultExpectation != nil {
		mmGetChatInfo.mock.t.Fatalf("Default expectation is already set for the ChatRepository.GetChatInfo method")
	}

	if len(mmGetChatInfo.expectations) > 0 {
		mmGetChatInfo.mock.t.Fatalf("Some expectations are already set for the ChatRepository.GetChatInfo method")
	}

	mmGetChatInfo.mock.funcGetChatInfo = f
	mmGetChatInfo.mock.funcGetChatInfoOrigin = minimock.CallerInfo(1)
	return mmGetChatInfo.mock
}

// When sets expectation for the ChatRepository.GetChatInfo which will trigger the result defined by the following
// Then helper
func (mmGetChatInfo *mChatRepositoryMockGetChatInfo) When(ctx context.Context, chatID int64) *ChatRepositoryMockGetChatInfoExpectation {
	if mmGetChatInfo.mock.funcGetChatInfo != nil {
		mmGetChatInfo.mock.t.Fatalf("ChatRepositoryMock.GetChatInfo mock is already set by Set")
	}

	expectation := &ChatRepositoryMockGetChatInfoExpectation{
		mock:               mmGetChatInfo.mock,
		params:             &ChatRepositoryMockGetChatInfoParams{ctx, chatID},
		expectationOrigins: ChatRepositoryMockGetChatInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetChatInfo.expectations = append(mmGetChatInfo.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.GetChatInfo return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockGetChatInfoExpectation) Then(sa1 []string, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockGetChatInfoResults{sa1, err}
	return e.mock
}

// Times sets number of times ChatRepository.GetChatInfo should be invoked
func (mmGetChatInfo *mChatRepositoryMockGetChatInfo) Times(n uint64) *mChatRepositoryMockGetChatInfo {
	if n == 0 {
		mmGetChatInfo.mock.t.Fatalf("Times of ChatRepositoryMock.GetChatInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetChatInfo.expectedInvocations, n)
	mmGetChatInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetChatInfo
}

func (mmGetChatInfo *mChatRepositoryMockGetChatInfo) invocationsDone() bool {
	if len(mmGetChatInfo.expectations) == 0 && mmGetChatInfo.defaultExpectation == nil && mmGetChatInfo.mock.funcGetChatInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetChatInfo.mock.afterGetChatInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetChatInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetChatInfo implements mm_repository.ChatRepository
func (mmGetChatInfo *ChatRepositoryMock) GetChatInfo(ctx context.Context, chatID int64) (sa1 []string, err error) {
	mm_atomic.AddUint64(&mmGetChatInfo.beforeGetChatInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetChatInfo.afterGetChatInfoCounter, 1)

	mmGetChatInfo.t.Helper()

	if mmGetChatInfo.inspectFuncGetChatInfo != nil {
		mmGetChatInfo.inspectFuncGetChatInfo(ctx, chatID)
	}

	mm_params := ChatRepositoryMockGetChatInfoParams{ctx, chatID}

	// Record call args
	mmGetChatInfo.GetChatInfoMock.mutex.Lock()
	mmGetChatInfo.GetChatInfoMock.callArgs = append(mmGetChatInfo.GetChatInfoMock.callArgs, &mm_params)
	mmGetChatInfo.GetChatInfoMock.mutex.Unlock()

	for _, e := range mmGetChatInfo.GetChatInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmGetChatInfo.GetChatInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetChatInfo.GetChatInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmGetChatInfo.GetChatInfoMock.defaultExpectation.params
		mm_want_ptrs := mmGetChatInfo.GetChatInfoMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockGetChatInfoParams{ctx, chatID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetChatInfo.t.Errorf("ChatRepositoryMock.GetChatInfo got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChatInfo.GetChatInfoMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmGetChatInfo.t.Errorf("ChatRepositoryMock.GetChatInfo got unexpected parameter chatID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChatInfo.GetChatInfoMock.defaultExpectation.expectationOrigins.originChatID, *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetChatInfo.t.Errorf("ChatRepositoryMock.GetChatInfo got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetChatInfo.GetChatInfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetChatInfo.GetChatInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetChatInfo.t.Fatal("No results are set for the ChatRepositoryMock.GetChatInfo")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmGetChatInfo.funcGetChatInfo != nil {
		return mmGetChatInfo.funcGetChatInfo(ctx, chatID)
	}
	mmGetChatInfo.t.Fatalf("Unexpected call to ChatRepositoryMock.GetChatInfo. %v %v", ctx, chatID)
	return
}

// GetChatInfoAfterCounter returns a count of finished ChatRepositoryMock.GetChatInfo invocations
func (mmGetChatInfo *ChatRepositoryMock) GetChatInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatInfo.afterGetChatInfoCounter)
}

// GetChatInfoBeforeCounter returns a count of ChatRepositoryMock.GetChatInfo invocations
func (mmGetChatInfo *ChatRepositoryMock) GetChatInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatInfo.beforeGetChatInfoCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.GetChatInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetChatInfo *mChatRepositoryMockGetChatInfo) Calls() []*ChatRepositoryMockGetChatInfoParams {
	mmGetChatInfo.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockGetChatInfoParams, len(mmGetChatInfo.callArgs))
	copy(argCopy, mmGetChatInfo.callArgs)

	mmGetChatInfo.mutex.RUnlock()

	return argCopy
}

// MinimockGetChatInfoDone returns true if the count of the GetChatInfo invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockGetChatInfoDone() bool {
	if m.GetChatInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetChatInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetChatInfoMock.invocationsDone()
}

// MinimockGetChatInfoInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockGetChatInfoInspect() {
	for _, e := range m.GetChatInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChatInfo at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetChatInfoCounter := mm_atomic.LoadUint64(&m.afterGetChatInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatInfoMock.defaultExpectation != nil && afterGetChatInfoCounter < 1 {
		if m.GetChatInfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChatInfo at\n%s", m.GetChatInfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChatInfo at\n%s with params: %#v", m.GetChatInfoMock.defaultExpectation.expectationOrigins.origin, *m.GetChatInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChatInfo != nil && afterGetChatInfoCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.GetChatInfo at\n%s", m.funcGetChatInfoOrigin)
	}

	if !m.GetChatInfoMock.invocationsDone() && afterGetChatInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.GetChatInfo at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetChatInfoMock.expectedInvocations), m.GetChatInfoMock.expectedInvocationsOrigin, afterGetChatInfoCounter)
	}
}

type mChatRepositoryMockGetMessage struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockGetMessageExpectation
	expectations       []*ChatRepositoryMockGetMessageExpectation

	callArgs []*ChatRepositoryMockGetMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockGetMessageExpectation specifies expectation struct of the ChatRepository.GetMessage
type ChatRepositoryMockGetMessageExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockGetMessageParams
	paramPtrs          *ChatRepositoryMockGetMessageParamPtrs
	expectationOrigins ChatRepositoryMockGetMessageExpectationOrigins
	results            *ChatRepositoryMockGetMessageResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockGetMessageParams contains parameters of the ChatRepository.GetMessage
type ChatRepositoryMockGetMessageParams struct {
	ctx    context.Context
	chatID int64
	page   uint64
}

// ChatRepositoryMockGetMessageParamPtrs contains pointers to parameters of the ChatRepository.GetMessage
type ChatRepositoryMockGetMessageParamPtrs struct {
	ctx    *context.Context
	chatID *int64
	page   *uint64
}

// ChatRepositoryMockGetMessageResults contains results of the ChatRepository.GetMessage
type ChatRepositoryMockGetMessageResults struct {
	mpa1 []*model.Message
	err  error
}

// ChatRepositoryMockGetMessageOrigins contains origins of expectations of the ChatRepository.GetMessage
type ChatRepositoryMockGetMessageExpectationOrigins struct {
	origin       string
	originCtx    string
	originChatID string
	originPage   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetMessage *mChatRepositoryMockGetMessage) Optional() *mChatRepositoryMockGetMessage {
	mmGetMessage.optional = true
	return mmGetMessage
}

// Expect sets up expected params for ChatRepository.GetMessage
func (mmGetMessage *mChatRepositoryMockGetMessage) Expect(ctx context.Context, chatID int64, page uint64) *mChatRepositoryMockGetMessage {
	if mmGetMessage.mock.funcGetMessage != nil {
		mmGetMessage.mock.t.Fatalf("ChatRepositoryMock.GetMessage mock is already set by Set")
	}

	if mmGetMessage.defaultExpectation == nil {
		mmGetMessage.defaultExpectation = &ChatRepositoryMockGetMessageExpectation{}
	}

	if mmGetMessage.defaultExpectation.paramPtrs != nil {
		mmGetMessage.mock.t.Fatalf("ChatRepositoryMock.GetMessage mock is already set by ExpectParams functions")
	}

	mmGetMessage.defaultExpectation.params = &ChatRepositoryMockGetMessageParams{ctx, chatID, page}
	mmGetMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetMessage.expectations {
		if minimock.Equal(e.params, mmGetMessage.defaultExpectation.params) {
			mmGetMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetMessage.defaultExpectation.params)
		}
	}

	return mmGetMessage
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.GetMessage
func (mmGetMessage *mChatRepositoryMockGetMessage) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockGetMessage {
	if mmGetMessage.mock.funcGetMessage != nil {
		mmGetMessage.mock.t.Fatalf("ChatRepositoryMock.GetMessage mock is already set by Set")
	}

	if mmGetMessage.defaultExpectation == nil {
		mmGetMessage.defaultExpectation = &ChatRepositoryMockGetMessageExpectation{}
	}

	if mmGetMessage.defaultExpectation.params != nil {
		mmGetMessage.mock.t.Fatalf("ChatRepositoryMock.GetMessage mock is already set by Expect")
	}

	if mmGetMessage.defaultExpectation.paramPtrs == nil {
		mmGetMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockGetMessageParamPtrs{}
	}
	mmGetMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetMessage
}

// ExpectChatIDParam2 sets up expected param chatID for ChatRepository.GetMessage
func (mmGetMessage *mChatRepositoryMockGetMessage) ExpectChatIDParam2(chatID int64) *mChatRepositoryMockGetMessage {
	if mmGetMessage.mock.funcGetMessage != nil {
		mmGetMessage.mock.t.Fatalf("ChatRepositoryMock.GetMessage mock is already set by Set")
	}

	if mmGetMessage.defaultExpectation == nil {
		mmGetMessage.defaultExpectation = &ChatRepositoryMockGetMessageExpectation{}
	}

	if mmGetMessage.defaultExpectation.params != nil {
		mmGetMessage.mock.t.Fatalf("ChatRepositoryMock.GetMessage mock is already set by Expect")
	}

	if mmGetMessage.defaultExpectation.paramPtrs == nil {
		mmGetMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockGetMessageParamPtrs{}
	}
	mmGetMessage.defaultExpectation.paramPtrs.chatID = &chatID
	mmGetMessage.defaultExpectation.expectationOrigins.originChatID = minimock.CallerInfo(1)

	return mmGetMessage
}

// ExpectPageParam3 sets up expected param page for ChatRepository.GetMessage
func (mmGetMessage *mChatRepositoryMockGetMessage) ExpectPageParam3(page uint64) *mChatRepositoryMockGetMessage {
	if mmGetMessage.mock.funcGetMessage != nil {
		mmGetMessage.mock.t.Fatalf("ChatRepositoryMock.GetMessage mock is already set by Set")
	}

	if mmGetMessage.defaultExpectation == nil {
		mmGetMessage.defaultExpectation = &ChatRepositoryMockGetMessageExpectation{}
	}

	if mmGetMessage.defaultExpectation.params != nil {
		mmGetMessage.mock.t.Fatalf("ChatRepositoryMock.GetMessage mock is already set by Expect")
	}

	if mmGetMessage.defaultExpectation.paramPtrs == nil {
		mmGetMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockGetMessageParamPtrs{}
	}
	mmGetMessage.defaultExpectation.paramPtrs.page = &page
	mmGetMessage.defaultExpectation.expectationOrigins.originPage = minimock.CallerInfo(1)

	return mmGetMessage
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.GetMessage
func (mmGetMessage *mChatRepositoryMockGetMessage) Inspect(f func(ctx context.Context, chatID int64, page uint64)) *mChatRepositoryMockGetMessage {
	if mmGetMessage.mock.inspectFuncGetMessage != nil {
		mmGetMessage.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.GetMessage")
	}

	mmGetMessage.mock.inspectFuncGetMessage = f

	return mmGetMessage
}

// Return sets up results that will be returned by ChatRepository.GetMessage
func (mmGetMessage *mChatRepositoryMockGetMessage) Return(mpa1 []*model.Message, err error) *ChatRepositoryMock {
	if mmGetMessage.mock.funcGetMessage != nil {
		mmGetMessage.mock.t.Fatalf("ChatRepositoryMock.GetMessage mock is already set by Set")
	}

	if mmGetMessage.defaultExpectation == nil {
		mmGetMessage.defaultExpectation = &ChatRepositoryMockGetMessageExpectation{mock: mmGetMessage.mock}
	}
	mmGetMessage.defaultExpectation.results = &ChatRepositoryMockGetMessageResults{mpa1, err}
	mmGetMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetMessage.mock
}

// Set uses given function f to mock the ChatRepository.GetMessage method
func (mmGetMessage *mChatRepositoryMockGetMessage) Set(f func(ctx context.Context, chatID int64, page uint64) (mpa1 []*model.Message, err error)) *ChatRepositoryMock {
	if mmGetMessage.defaultExpectation != nil {
		mmGetMessage.mock.t.Fatalf("Default expectation is already set for the ChatRepository.GetMessage method")
	}

	if len(mmGetMessage.expectations) > 0 {
		mmGetMessage.mock.t.Fatalf("Some expectations are already set for the ChatRepository.GetMessage method")
	}

	mmGetMessage.mock.funcGetMessage = f
	mmGetMessage.mock.funcGetMessageOrigin = minimock.CallerInfo(1)
	return mmGetMessage.mock
}

// When sets expectation for the ChatRepository.GetMessage which will trigger the result defined by the following
// Then helper
func (mmGetMessage *mChatRepositoryMockGetMessage) When(ctx context.Context, chatID int64, page uint64) *ChatRepositoryMockGetMessageExpectation {
	if mmGetMessage.mock.funcGetMessage != nil {
		mmGetMessage.mock.t.Fatalf("ChatRepositoryMock.GetMessage mock is already set by Set")
	}

	expectation := &ChatRepositoryMockGetMessageExpectation{
		mock:               mmGetMessage.mock,
		params:             &ChatRepositoryMockGetMessageParams{ctx, chatID, page},
		expectationOrigins: ChatRepositoryMockGetMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetMessage.expectations = append(mmGetMessage.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.GetMessage return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockGetMessageExpectation) Then(mpa1 []*model.Message, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockGetMessageResults{mpa1, err}
	return e.mock
}

// Times sets number of times ChatRepository.GetMessage should be invoked
func (mmGetMessage *mChatRepositoryMockGetMessage) Times(n uint64) *mChatRepositoryMockGetMessage {
	if n == 0 {
		mmGetMessage.mock.t.Fatalf("Times of ChatRepositoryMock.GetMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetMessage.expectedInvocations, n)
	mmGetMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetMessage
}

func (mmGetMessage *mChatRepositoryMockGetMessage) invocationsDone() bool {
	if len(mmGetMessage.expectations) == 0 && mmGetMessage.defaultExpectation == nil && mmGetMessage.mock.funcGetMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetMessage.mock.afterGetMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetMessage implements mm_repository.ChatRepository
func (mmGetMessage *ChatRepositoryMock) GetMessage(ctx context.Context, chatID int64, page uint64) (mpa1 []*model.Message, err error) {
	mm_atomic.AddUint64(&mmGetMessage.beforeGetMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmGetMessage.afterGetMessageCounter, 1)

	mmGetMessage.t.Helper()

	if mmGetMessage.inspectFuncGetMessage != nil {
		mmGetMessage.inspectFuncGetMessage(ctx, chatID, page)
	}

	mm_params := ChatRepositoryMockGetMessageParams{ctx, chatID, page}

	// Record call args
	mmGetMessage.GetMessageMock.mutex.Lock()
	mmGetMessage.GetMessageMock.callArgs = append(mmGetMessage.GetMessageMock.callArgs, &mm_params)
	mmGetMessage.GetMessageMock.mutex.Unlock()

	for _, e := range mmGetMessage.GetMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mpa1, e.results.err
		}
	}

	if mmGetMessage.GetMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetMessage.GetMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmGetMessage.GetMessageMock.defaultExpectation.params
		mm_want_ptrs := mmGetMessage.GetMessageMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockGetMessageParams{ctx, chatID, page}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetMessage.t.Errorf("ChatRepositoryMock.GetMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetMessage.GetMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmGetMessage.t.Errorf("ChatRepositoryMock.GetMessage got unexpected parameter chatID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetMessage.GetMessageMock.defaultExpectation.expectationOrigins.originChatID, *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

			if mm_want_ptrs.page != nil && !minimock.Equal(*mm_want_ptrs.page, mm_got.page) {
				mmGetMessage.t.Errorf("ChatRepositoryMock.GetMessage got unexpected parameter page, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetMessage.GetMessageMock.defaultExpectation.expectationOrigins.originPage, *mm_want_ptrs.page, mm_got.page, minimock.Diff(*mm_want_ptrs.page, mm_got.page))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetMessage.t.Errorf("ChatRepositoryMock.GetMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetMessage.GetMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetMessage.GetMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmGetMessage.t.Fatal("No results are set for the ChatRepositoryMock.GetMessage")
		}
		return (*mm_results).mpa1, (*mm_results).err
	}
	if mmGetMessage.funcGetMessage != nil {
		return mmGetMessage.funcGetMessage(ctx, chatID, page)
	}
	mmGetMessage.t.Fatalf("Unexpected call to ChatRepositoryMock.GetMessage. %v %v %v", ctx, chatID, page)
	return
}

// GetMessageAfterCounter returns a count of finished ChatRepositoryMock.GetMessage invocations
func (mmGetMessage *ChatRepositoryMock) GetMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMessage.afterGetMessageCounter)
}

// GetMessageBeforeCounter returns a count of ChatRepositoryMock.GetMessage invocations
func (mmGetMessage *ChatRepositoryMock) GetMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMessage.beforeGetMessageCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.GetMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetMessage *mChatRepositoryMockGetMessage) Calls() []*ChatRepositoryMockGetMessageParams {
	mmGetMessage.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockGetMessageParams, len(mmGetMessage.callArgs))
	copy(argCopy, mmGetMessage.callArgs)

	mmGetMessage.mutex.RUnlock()

	return argCopy
}

// MinimockGetMessageDone returns true if the count of the GetMessage invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockGetMessageDone() bool {
	if m.GetMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMessageMock.invocationsDone()
}

// MinimockGetMessageInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockGetMessageInspect() {
	for _, e := range m.GetMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetMessageCounter := mm_atomic.LoadUint64(&m.afterGetMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMessageMock.defaultExpectation != nil && afterGetMessageCounter < 1 {
		if m.GetMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetMessage at\n%s", m.GetMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetMessage at\n%s with params: %#v", m.GetMessageMock.defaultExpectation.expectationOrigins.origin, *m.GetMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMessage != nil && afterGetMessageCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.GetMessage at\n%s", m.funcGetMessageOrigin)
	}

	if !m.GetMessageMock.invocationsDone() && afterGetMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.GetMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMessageMock.expectedInvocations), m.GetMessageMock.expectedInvocationsOrigin, afterGetMessageCounter)
	}
}

type mChatRepositoryMockSendMessage struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockSendMessageExpectation
	expectations       []*ChatRepositoryMockSendMessageExpectation

	callArgs []*ChatRepositoryMockSendMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockSendMessageExpectation specifies expectation struct of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockSendMessageParams
	paramPtrs          *ChatRepositoryMockSendMessageParamPtrs
	expectationOrigins ChatRepositoryMockSendMessageExpectationOrigins
	results            *ChatRepositoryMockSendMessageResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockSendMessageParams contains parameters of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageParams struct {
	ctx    context.Context
	chatID int64
	mes    *model.Message
}

// ChatRepositoryMockSendMessageParamPtrs contains pointers to parameters of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageParamPtrs struct {
	ctx    *context.Context
	chatID *int64
	mes    **model.Message
}

// ChatRepositoryMockSendMessageResults contains results of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageResults struct {
	s1  string
	err error
}

// ChatRepositoryMockSendMessageOrigins contains origins of expectations of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageExpectationOrigins struct {
	origin       string
	originCtx    string
	originChatID string
	originMes    string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendMessage *mChatRepositoryMockSendMessage) Optional() *mChatRepositoryMockSendMessage {
	mmSendMessage.optional = true
	return mmSendMessage
}

// Expect sets up expected params for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) Expect(ctx context.Context, chatID int64, mes *model.Message) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.paramPtrs != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by ExpectParams functions")
	}

	mmSendMessage.defaultExpectation.params = &ChatRepositoryMockSendMessageParams{ctx, chatID, mes}
	mmSendMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.params != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Expect")
	}

	if mmSendMessage.defaultExpectation.paramPtrs == nil {
		mmSendMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockSendMessageParamPtrs{}
	}
	mmSendMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmSendMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSendMessage
}

// ExpectChatIDParam2 sets up expected param chatID for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) ExpectChatIDParam2(chatID int64) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.params != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Expect")
	}

	if mmSendMessage.defaultExpectation.paramPtrs == nil {
		mmSendMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockSendMessageParamPtrs{}
	}
	mmSendMessage.defaultExpectation.paramPtrs.chatID = &chatID
	mmSendMessage.defaultExpectation.expectationOrigins.originChatID = minimock.CallerInfo(1)

	return mmSendMessage
}

// ExpectMesParam3 sets up expected param mes for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) ExpectMesParam3(mes *model.Message) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.params != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Expect")
	}

	if mmSendMessage.defaultExpectation.paramPtrs == nil {
		mmSendMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockSendMessageParamPtrs{}
	}
	mmSendMessage.defaultExpectation.paramPtrs.mes = &mes
	mmSendMessage.defaultExpectation.expectationOrigins.originMes = minimock.CallerInfo(1)

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) Inspect(f func(ctx context.Context, chatID int64, mes *model.Message)) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) Return(s1 string, err error) *ChatRepositoryMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{mock: mmSendMessage.mock}
	}
	mmSendMessage.defaultExpectation.results = &ChatRepositoryMockSendMessageResults{s1, err}
	mmSendMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSendMessage.mock
}

// Set uses given function f to mock the ChatRepository.SendMessage method
func (mmSendMessage *mChatRepositoryMockSendMessage) Set(f func(ctx context.Context, chatID int64, mes *model.Message) (s1 string, err error)) *ChatRepositoryMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the ChatRepository.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the ChatRepository.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	mmSendMessage.mock.funcSendMessageOrigin = minimock.CallerInfo(1)
	return mmSendMessage.mock
}

// When sets expectation for the ChatRepository.SendMessage which will trigger the result defined by the following
// Then helper
func (mmSendMessage *mChatRepositoryMockSendMessage) When(ctx context.Context, chatID int64, mes *model.Message) *ChatRepositoryMockSendMessageExpectation {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	expectation := &ChatRepositoryMockSendMessageExpectation{
		mock:               mmSendMessage.mock,
		params:             &ChatRepositoryMockSendMessageParams{ctx, chatID, mes},
		expectationOrigins: ChatRepositoryMockSendMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSendMessage.expectations = append(mmSendMessage.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.SendMessage return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockSendMessageExpectation) Then(s1 string, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockSendMessageResults{s1, err}
	return e.mock
}

// Times sets number of times ChatRepository.SendMessage should be invoked
func (mmSendMessage *mChatRepositoryMockSendMessage) Times(n uint64) *mChatRepositoryMockSendMessage {
	if n == 0 {
		mmSendMessage.mock.t.Fatalf("Times of ChatRepositoryMock.SendMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendMessage.expectedInvocations, n)
	mmSendMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSendMessage
}

func (mmSendMessage *mChatRepositoryMockSendMessage) invocationsDone() bool {
	if len(mmSendMessage.expectations) == 0 && mmSendMessage.defaultExpectation == nil && mmSendMessage.mock.funcSendMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendMessage.mock.afterSendMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendMessage implements mm_repository.ChatRepository
func (mmSendMessage *ChatRepositoryMock) SendMessage(ctx context.Context, chatID int64, mes *model.Message) (s1 string, err error) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	mmSendMessage.t.Helper()

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(ctx, chatID, mes)
	}

	mm_params := ChatRepositoryMockSendMessageParams{ctx, chatID, mes}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, &mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_want_ptrs := mmSendMessage.SendMessageMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockSendMessageParams{ctx, chatID, mes}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameter chatID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.originChatID, *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

			if mm_want_ptrs.mes != nil && !minimock.Equal(*mm_want_ptrs.mes, mm_got.mes) {
				mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameter mes, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.originMes, *mm_want_ptrs.mes, mm_got.mes, minimock.Diff(*mm_want_ptrs.mes, mm_got.mes))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendMessage.SendMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmSendMessage.t.Fatal("No results are set for the ChatRepositoryMock.SendMessage")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmSendMessage.funcSendMessage != nil {
		return mmSendMessage.funcSendMessage(ctx, chatID, mes)
	}
	mmSendMessage.t.Fatalf("Unexpected call to ChatRepositoryMock.SendMessage. %v %v %v", ctx, chatID, mes)
	return
}

// SendMessageAfterCounter returns a count of finished ChatRepositoryMock.SendMessage invocations
func (mmSendMessage *ChatRepositoryMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of ChatRepositoryMock.SendMessage invocations
func (mmSendMessage *ChatRepositoryMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mChatRepositoryMockSendMessage) Calls() []*ChatRepositoryMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockSendMessageDone() bool {
	if m.SendMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendMessageMock.invocationsDone()
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendMessageCounter := mm_atomic.LoadUint64(&m.afterSendMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && afterSendMessageCounter < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s", m.SendMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s with params: %#v", m.SendMessageMock.defaultExpectation.expectationOrigins.origin, *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && afterSendMessageCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s", m.funcSendMessageOrigin)
	}

	if !m.SendMessageMock.invocationsDone() && afterSendMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.SendMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendMessageMock.expectedInvocations), m.SendMessageMock.expectedInvocationsOrigin, afterSendMessageCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockDeleteChatInspect()

			m.MinimockGetChatInfoInspect()

			m.MinimockGetMessageInspect()

			m.MinimockSendMessageInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteChatDone() &&
		m.MinimockGetChatInfoDone() &&
		m.MinimockGetMessageDone() &&
		m.MinimockSendMessageDone()
}
